

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Nov 27 10:48:05 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22  0000                     
    23                           ; Version 1.41
    24                           ; Generated 25/01/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4550 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  000B50                     __pidataCOMRAM:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _keypad
    63  000B50  37                 	db	55
    64  000B51  38                 	db	56
    65  000B52  39                 	db	57
    66  000B53  2F                 	db	47
    67  000B54  34                 	db	52
    68  000B55  35                 	db	53
    69  000B56  36                 	db	54
    70  000B57  2A                 	db	42
    71  000B58  31                 	db	49
    72  000B59  32                 	db	50
    73  000B5A  33                 	db	51
    74  000B5B  2D                 	db	45
    75  000B5C  20                 	db	32
    76  000B5D  30                 	db	48
    77  000B5E  3D                 	db	61
    78  000B5F  2B                 	db	43
    79                           
    80                           ;initializer for keypad_getkey@F3814
    81  000B60  31                 	db	49
    82  000B61  32                 	db	50
    83  000B62  33                 	db	51
    84  000B63  41                 	db	65
    85  000B64  34                 	db	52
    86  000B65  35                 	db	53
    87  000B66  36                 	db	54
    88  000B67  42                 	db	66
    89  000B68  37                 	db	55
    90  000B69  38                 	db	56
    91  000B6A  39                 	db	57
    92  000B6B  43                 	db	67
    93  000B6C  2A                 	db	42
    94  000B6D  30                 	db	48
    95  000B6E  23                 	db	35
    96  000B6F  44                 	db	68
    97                           
    98                           ;initializer for _var
    99  000B70  30                 	db	48
   100                           
   101                           ;initializer for _key
   102  000B71  30                 	db	48
   103  0000                     _TXREG	set	4013
   104  0000                     _SPBRG	set	4015
   105  0000                     _RCSTAbits	set	4011
   106  0000                     _BAUDCONbits	set	4024
   107  0000                     _TXSTAbits	set	4012
   108  0000                     _TRISCbits	set	3988
   109  0000                     _OSCCONbits	set	4051
   110  0000                     _PORTDbits	set	3971
   111  0000                     _LATDbits	set	3980
   112  0000                     _PORTD	set	3971
   113  0000                     _LATD	set	3980
   114  0000                     _INTCON2bits	set	4081
   115  0000                     _TRISD	set	3989
   116  0000                     _TRISB	set	3987
   117  0000                     _TRISC	set	3988
   118  0000                     _LATB	set	3978
   119  0000                     _LATC2	set	31834
   120  0000                     _LATC1	set	31833
   121  0000                     _LATC0	set	31832
   122                           
   123                           	psect	smallconst
   124  000800                     __psmallconst:
   125                           	opt stack 0
   126  000800  00                 	db	0
   127  000801                     STR_1:
   128  000801  4B                 	db	75	;'K'
   129  000802  45                 	db	69	;'E'
   130  000803  59                 	db	89	;'Y'
   131  000804  3A                 	db	58	;':'
   132  000805  20                 	db	32
   133  000806  70                 	db	112	;'p'
   134  000807  61                 	db	97	;'a'
   135  000808  73                 	db	115	;'s'
   136  000809  73                 	db	115	;'s'
   137  00080A  77                 	db	119	;'w'
   138  00080B  6F                 	db	111	;'o'
   139  00080C  72                 	db	114	;'r'
   140  00080D  64                 	db	100	;'d'
   141  00080E  00                 	db	0
   142  00080F                     STR_2:
   143  00080F  4B                 	db	75	;'K'
   144  000810  45                 	db	69	;'E'
   145  000811  59                 	db	89	;'Y'
   146  000812  3A                 	db	58	;':'
   147  000813  20                 	db	32
   148  000814  00                 	db	0
   149  000815                     STR_3:
   150  000815  20                 	db	32
   151  000816  54                 	db	84	;'T'
   152  000817  45                 	db	69	;'E'
   153  000818  00                 	db	0
   154                           
   155                           ; #config settings
   156  000819  00                 	db	0	; dummy byte at the end
   157  0000                     
   158                           	psect	cinit
   159  000B20                     __pcinit:
   160                           	opt stack 0
   161  000B20                     start_initialization:
   162                           	opt stack 0
   163  000B20                     __initialization:
   164                           	opt stack 0
   165                           
   166                           ; Initialize objects allocated to COMRAM (34 bytes)
   167                           ; load TBLPTR registers with __pidataCOMRAM
   168  000B20  0E50               	movlw	low __pidataCOMRAM
   169  000B22  6EF6               	movwf	tblptrl,c
   170  000B24  0E0B               	movlw	high __pidataCOMRAM
   171  000B26  6EF7               	movwf	tblptrh,c
   172  000B28  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   173  000B2A  6EF8               	movwf	tblptru,c
   174  000B2C  EE00  F001         	lfsr	0,__pdataCOMRAM
   175  000B30  EE10 F022          	lfsr	1,34
   176  000B34                     copy_data0:
   177  000B34  0009               	tblrd		*+
   178  000B36  CFF5 FFEE          	movff	tablat,postinc0
   179  000B3A  50E5               	movf	postdec1,w,c
   180  000B3C  50E1               	movf	fsr1l,w,c
   181  000B3E  E1FA               	bnz	copy_data0
   182                           
   183                           ; Clear objects allocated to COMRAM (3 bytes)
   184  000B40  6A3B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   185  000B42  6A3A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   186  000B44  6A39               	clrf	__pbssCOMRAM& (0+255),c
   187  000B46                     end_of_initialization:
   188                           	opt stack 0
   189  000B46                     __end_of__initialization:
   190                           	opt stack 0
   191  000B46  0E00               	movlw	low (__Lmediumconst shr (0+16))
   192  000B48  6EF8               	movwf	tblptru,c
   193  000B4A  0100               	movlb	0
   194  000B4C  EFAD  F004         	goto	_main	;jump to C main() function
   195                           tblptru	equ	0xFF8
   196                           tblptrh	equ	0xFF7
   197                           tblptrl	equ	0xFF6
   198                           tablat	equ	0xFF5
   199                           postinc0	equ	0xFEE
   200                           postdec1	equ	0xFE5
   201                           fsr1l	equ	0xFE1
   202                           
   203                           	psect	bssCOMRAM
   204  000039                     __pbssCOMRAM:
   205                           	opt stack 0
   206  000039                     _temp_col:
   207                           	opt stack 0
   208  000039                     	ds	1
   209  00003A                     _rowloc:
   210                           	opt stack 0
   211  00003A                     	ds	1
   212  00003B                     _col_loc:
   213                           	opt stack 0
   214  00003B                     	ds	1
   215                           tblptru	equ	0xFF8
   216                           tblptrh	equ	0xFF7
   217                           tblptrl	equ	0xFF6
   218                           tablat	equ	0xFF5
   219                           postinc0	equ	0xFEE
   220                           postdec1	equ	0xFE5
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	dataCOMRAM
   224  000001                     __pdataCOMRAM:
   225                           	opt stack 0
   226  000001                     _keypad:
   227                           	opt stack 0
   228  000001                     	ds	16
   229  000011                     keypad_getkey@F3814:
   230                           	opt stack 0
   231  000011                     	ds	16
   232  000021                     _var:
   233                           	opt stack 0
   234  000021                     	ds	1
   235  000022                     _key:
   236                           	opt stack 0
   237  000022                     	ds	1
   238                           tblptru	equ	0xFF8
   239                           tblptrh	equ	0xFF7
   240                           tblptrl	equ	0xFF6
   241                           tablat	equ	0xFF5
   242                           postinc0	equ	0xFEE
   243                           postdec1	equ	0xFE5
   244                           fsr1l	equ	0xFE1
   245                           
   246                           	psect	cstackCOMRAM
   247  000023                     __pcstackCOMRAM:
   248                           	opt stack 0
   249  000023                     MSdelay@val:
   250                           	opt stack 0
   251  000023                     keypad_getkey@letras:
   252                           	opt stack 0
   253                           
   254                           ; 16 bytes @ 0x0
   255  000023                     	ds	2
   256  000025                     MSdelay@i:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x2
   260  000025                     	ds	2
   261  000027                     MSdelay@j:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x4
   265  000027                     	ds	2
   266  000029                     LCD_Command@cmd:
   267                           	opt stack 0
   268  000029                     LCD_Char@char_data:
   269                           	opt stack 0
   270                           
   271                           ; 1 bytes @ 0x6
   272  000029                     	ds	1
   273  00002A                     LCD_String@str:
   274                           	opt stack 0
   275                           
   276                           ; 3 bytes @ 0x7
   277  00002A                     	ds	3
   278  00002D                     LCD_String_xy@pos:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0xA
   282  00002D                     	ds	1
   283  00002E                     LCD_String_xy@str:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0xB
   287  00002E                     	ds	2
   288  000030                     LCD_String_xy@row:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0xD
   292  000030                     	ds	3
   293  000033                     keypad_getkey@valor:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0x10
   297  000033                     	ds	1
   298  000034                     keypad_getkey@i:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x11
   302  000034                     	ds	2
   303  000036                     ??_main:
   304                           
   305                           ; 1 bytes @ 0x13
   306  000036                     	ds	3
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           postdec1	equ	0xFE5
   313                           fsr1l	equ	0xFE1
   314                           
   315 ;;
   316 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   317 ;;
   318 ;; *************** function _main *****************
   319 ;; Defined at:
   320 ;;		line 14 in file "main.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;		None
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      void 
   327 ;; Registers used:
   328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 0/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   334 ;;      Params:         0       0       0       0       0       0       0       0       0
   335 ;;      Locals:         0       0       0       0       0       0       0       0       0
   336 ;;      Temps:          3       0       0       0       0       0       0       0       0
   337 ;;      Totals:         3       0       0       0       0       0       0       0       0
   338 ;;Total ram usage:        3 bytes
   339 ;; Hardware stack levels required when called:    4
   340 ;; This function calls:
   341 ;;		_LCD_Init
   342 ;;		_LCD_String
   343 ;;		_LCD_String_xy
   344 ;;		_keypad_getkey
   345 ;;		_keypad_init
   346 ;; This function is called by:
   347 ;;		Startup code after reset
   348 ;; This function uses a non-reentrant model
   349 ;;
   350                           
   351                           	psect	text0
   352  00095A                     __ptext0:
   353                           	opt stack 0
   354  00095A                     _main:
   355                           	opt stack 27
   356                           
   357                           ;main.c: 17: OSCCONbits.IRCF = 0b111;
   358                           
   359                           ;incstack = 0
   360  00095A  88D3               	bsf	4051,4,c	;volatile
   361  00095C  8AD3               	bsf	4051,5,c	;volatile
   362  00095E  8CD3               	bsf	4051,6,c	;volatile
   363                           
   364                           ;main.c: 18: OSCCONbits.SCS = 0b10;
   365  000960  50D3               	movf	4051,w,c	;volatile
   366  000962  0BFC               	andlw	-4
   367  000964  0902               	iorlw	2
   368  000966  6ED3               	movwf	4051,c	;volatile
   369                           
   370                           ;main.c: 29: LCD_Init();
   371  000968  EC38  F005         	call	_LCD_Init	;wreg free
   372                           
   373                           ;main.c: 30: LCD_String_xy(1,0,"KEY: password");
   374  00096C  0E00               	movlw	0
   375  00096E  6E2D               	movwf	LCD_String_xy@pos,c
   376  000970  0E01               	movlw	low STR_1
   377  000972  6E2E               	movwf	LCD_String_xy@str,c
   378  000974  0E08               	movlw	high STR_1
   379  000976  6E2F               	movwf	LCD_String_xy@str+1,c
   380  000978  0E01               	movlw	1
   381  00097A  EC05  F005         	call	_LCD_String_xy
   382                           
   383                           ;main.c: 31: keypad_init();
   384  00097E  ECD7  F005         	call	_keypad_init	;wreg free
   385                           
   386                           ;main.c: 34: TRISCbits.RC6 = 0;
   387  000982  9C94               	bcf	3988,6,c	;volatile
   388                           
   389                           ;main.c: 36: TXSTAbits.TX9 = 0;
   390  000984  9CAC               	bcf	4012,6,c	;volatile
   391                           
   392                           ;main.c: 37: TXSTAbits.TXEN = 1;
   393  000986  8AAC               	bsf	4012,5,c	;volatile
   394                           
   395                           ;main.c: 38: TXSTAbits.SYNC = 0;
   396  000988  98AC               	bcf	4012,4,c	;volatile
   397                           
   398                           ;main.c: 39: TXSTAbits.BRGH = 0;
   399  00098A  94AC               	bcf	4012,2,c	;volatile
   400                           
   401                           ;main.c: 40: BAUDCONbits.BRG16 = 0;
   402  00098C  96B8               	bcf	4024,3,c	;volatile
   403                           
   404                           ;main.c: 41: RCSTAbits.SPEN = 1;
   405  00098E  8EAB               	bsf	4011,7,c	;volatile
   406                           
   407                           ;main.c: 43: SPBRG = (unsigned char) (((8000000L / 9600) / 64) - 1);
   408  000990  0E0C               	movlw	12
   409  000992  6EAF               	movwf	4015,c	;volatile
   410  000994                     l284:
   411  000994  A2AC               	btfss	4012,1,c	;volatile
   412  000996  D7FE               	goto	l284
   413                           
   414                           ;main.c: 47: }
   415                           ;main.c: 49: TXREG = 'f';
   416  000998  0E66               	movlw	102
   417  00099A  6EAD               	movwf	4013,c	;volatile
   418  00099C                     l1444:
   419                           
   420                           ;main.c: 53: key = keypad_getkey();
   421  00099C  EC0D  F004         	call	_keypad_getkey	;wreg free
   422  0009A0  6E22               	movwf	_key,c
   423                           
   424                           ;main.c: 60: if (key) {
   425  0009A2  5022               	movf	_key,w,c
   426  0009A4  B4D8               	btfsc	status,2,c
   427  0009A6  D020               	goto	l289
   428                           
   429                           ;main.c: 61: LCD_String_xy(2,0,"KEY: ");
   430  0009A8  0E00               	movlw	0
   431  0009AA  6E2D               	movwf	LCD_String_xy@pos,c
   432  0009AC  0E0F               	movlw	low STR_2
   433  0009AE  6E2E               	movwf	LCD_String_xy@str,c
   434  0009B0  0E08               	movlw	high STR_2
   435  0009B2  6E2F               	movwf	LCD_String_xy@str+1,c
   436  0009B4  0E02               	movlw	2
   437  0009B6  EC05  F005         	call	_LCD_String_xy
   438                           
   439                           ;main.c: 62: LCD_String((char)key);
   440  0009BA  5022               	movf	_key,w,c
   441  0009BC  6E36               	movwf	??_main& (0+255),c
   442  0009BE  6A37               	clrf	(??_main+1)& (0+255),c
   443  0009C0  6A38               	clrf	(??_main+2)& (0+255),c
   444  0009C2  C036  F02A         	movff	??_main,LCD_String@str
   445  0009C6  C037  F02B         	movff	??_main+1,LCD_String@str+1
   446  0009CA  C038  F02C         	movff	??_main+2,LCD_String@str+2
   447  0009CE  EC58  F005         	call	_LCD_String	;wreg free
   448                           
   449                           ;main.c: 63: LCD_String(" TE");
   450  0009D2  0E15               	movlw	low STR_3
   451  0009D4  6E2A               	movwf	LCD_String@str,c
   452  0009D6  0E08               	movlw	high STR_3
   453  0009D8  6E2B               	movwf	LCD_String@str+1,c
   454  0009DA  502A               	movf	LCD_String@str,w,c
   455  0009DC  102B               	iorwf	LCD_String@str+1,w,c
   456  0009DE  A4D8               	btfss	status,2,c
   457  0009E0  0E00               	movlw	low (__mediumconst shr (0+16))
   458  0009E2  6E2C               	movwf	LCD_String@str+2,c
   459  0009E4  EC58  F005         	call	_LCD_String	;wreg free
   460  0009E8                     l289:
   461  0009E8  A2AC               	btfss	4012,1,c	;volatile
   462  0009EA  D7FE               	goto	l289
   463                           
   464                           ;main.c: 67: }
   465                           ;main.c: 69: TXREG = key;
   466  0009EC  C022  FFAD         	movff	_key,4013	;volatile
   467                           
   468                           ;main.c: 70: _delay((unsigned long)((100)*(8000000L/4000.0)));
   469  0009F0  0E02               	movlw	2
   470  0009F2  6E37               	movwf	(??_main+1)& (0+255),c
   471  0009F4  0E04               	movlw	4
   472  0009F6  6E36               	movwf	??_main& (0+255),c
   473  0009F8  0EBA               	movlw	186
   474  0009FA                     u947:
   475  0009FA  2EE8               	decfsz	wreg,f,c
   476  0009FC  D7FE               	bra	u947
   477  0009FE  2E36               	decfsz	??_main& (0+255),f,c
   478  000A00  D7FC               	bra	u947
   479  000A02  2E37               	decfsz	(??_main+1)& (0+255),f,c
   480  000A04  D7FA               	bra	u947
   481  000A06  D000               	nop2	
   482  000A08  D7C9               	goto	l1444
   483  000A0A                     __end_of_main:
   484                           	opt stack 0
   485                           tblptru	equ	0xFF8
   486                           tblptrh	equ	0xFF7
   487                           tblptrl	equ	0xFF6
   488                           tablat	equ	0xFF5
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           postdec1	equ	0xFE5
   492                           fsr1l	equ	0xFE1
   493                           status	equ	0xFD8
   494                           
   495 ;; *************** function _keypad_init *****************
   496 ;; Defined at:
   497 ;;		line 5 in file "keypad.c"
   498 ;; Parameters:    Size  Location     Type
   499 ;;		None
   500 ;; Auto vars:     Size  Location     Type
   501 ;;		None
   502 ;; Return value:  Size  Location     Type
   503 ;;                  1    wreg      void 
   504 ;; Registers used:
   505 ;;		wreg, status,2, status,0
   506 ;; Tracked objects:
   507 ;;		On entry : 0/0
   508 ;;		On exit  : 0/0
   509 ;;		Unchanged: 0/0
   510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   511 ;;      Params:         0       0       0       0       0       0       0       0       0
   512 ;;      Locals:         0       0       0       0       0       0       0       0       0
   513 ;;      Temps:          0       0       0       0       0       0       0       0       0
   514 ;;      Totals:         0       0       0       0       0       0       0       0       0
   515 ;;Total ram usage:        0 bytes
   516 ;; Hardware stack levels used:    1
   517 ;; This function calls:
   518 ;;		Nothing
   519 ;; This function is called by:
   520 ;;		_main
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           	psect	text1
   525  000BAE                     __ptext1:
   526                           	opt stack 0
   527  000BAE                     _keypad_init:
   528                           	opt stack 30
   529                           
   530                           ;keypad.c: 7: TRISD &= ~(1<<0) & ~(1<<1) & ~(1<<2) & ~(1<<3);
   531                           
   532                           ;incstack = 0
   533  000BAE  0EF0               	movlw	240
   534  000BB0  1695               	andwf	3989,f,c	;volatile
   535                           
   536                           ;keypad.c: 8: TRISD |= (1<<4) | (1<<5) | (1<<6) | (1<<7);
   537  000BB2  0EF0               	movlw	240
   538  000BB4  1295               	iorwf	3989,f,c	;volatile
   539                           
   540                           ;keypad.c: 9: INTCON2bits.RBPU = 0;
   541  000BB6  9EF1               	bcf	intcon2,7,c	;volatile
   542  000BB8  0012               	return		;funcret
   543  000BBA                     __end_of_keypad_init:
   544                           	opt stack 0
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           intcon2	equ	0xFF1
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           postdec1	equ	0xFE5
   553                           fsr1l	equ	0xFE1
   554                           status	equ	0xFD8
   555                           
   556 ;; *************** function _keypad_getkey *****************
   557 ;; Defined at:
   558 ;;		line 12 in file "keypad.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;		None
   561 ;; Auto vars:     Size  Location     Type
   562 ;;  letras         16    0[COMRAM] unsigned char [4][4]
   563 ;;  i               2   17[COMRAM] int 
   564 ;;  valor           1   16[COMRAM] unsigned char 
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      unsigned char 
   567 ;; Registers used:
   568 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   574 ;;      Params:         0       0       0       0       0       0       0       0       0
   575 ;;      Locals:        19       0       0       0       0       0       0       0       0
   576 ;;      Temps:          0       0       0       0       0       0       0       0       0
   577 ;;      Totals:        19       0       0       0       0       0       0       0       0
   578 ;;Total ram usage:       19 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; This function calls:
   581 ;;		Nothing
   582 ;; This function is called by:
   583 ;;		_main
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text2
   588  00081A                     __ptext2:
   589                           	opt stack 0
   590  00081A                     _keypad_getkey:
   591                           	opt stack 30
   592                           
   593                           ;keypad.c: 14: char letras[4][4]={ {'1','2','3','A'},
   594                           ;keypad.c: 15: {'4','5','6','B'},
   595                           ;keypad.c: 16: {'7','8','9','C'},
   596                           ;keypad.c: 17: {'*','0','#','D'}};
   597                           
   598                           ;incstack = 0
   599  00081A  EE20  F011         	lfsr	2,keypad_getkey@F3814
   600  00081E  EE10  F023         	lfsr	1,keypad_getkey@letras
   601  000822  0E0F               	movlw	15
   602  000824                     u91:
   603  000824  CFDB FFE3          	movff	plusw2,plusw1
   604  000828  06E8               	decf	wreg,f,c
   605  00082A  E2FC               	bc	u91
   606                           
   607                           ;keypad.c: 18: int i=0;
   608  00082C  0E00               	movlw	0
   609  00082E  6E35               	movwf	keypad_getkey@i+1,c
   610  000830  0E00               	movlw	0
   611  000832  6E34               	movwf	keypad_getkey@i,c
   612                           
   613                           ;keypad.c: 19: char valor=0;
   614  000834  0E00               	movlw	0
   615  000836  6E33               	movwf	keypad_getkey@valor,c
   616                           
   617                           ;keypad.c: 21: for(i=0;i<4;i++){
   618  000838  0E00               	movlw	0
   619  00083A  6E35               	movwf	keypad_getkey@i+1,c
   620  00083C  0E00               	movlw	0
   621  00083E  6E34               	movwf	keypad_getkey@i,c
   622  000840  BE35               	btfsc	keypad_getkey@i+1,7,c
   623  000842  D008               	goto	l1010
   624  000844  5035               	movf	keypad_getkey@i+1,w,c
   625  000846  E105               	bnz	u100
   626  000848  0E04               	movlw	4
   627  00084A  5C34               	subwf	keypad_getkey@i,w,c
   628  00084C  B0D8               	btfsc	status,0,c
   629  00084E  D083               	goto	l1038
   630  000850  D001               	goto	l1010
   631  000852                     u100:
   632  000852  D081               	goto	l1038
   633  000854                     l1010:
   634                           
   635                           ;keypad.c: 23: if(i==0){
   636  000854  5034               	movf	keypad_getkey@i,w,c
   637  000856  1035               	iorwf	keypad_getkey@i+1,w,c
   638  000858  A4D8               	btfss	status,2,c
   639  00085A  D01A               	goto	l1016
   640                           
   641                           ;keypad.c: 25: LATD = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|(0<<0);
   642  00085C  0EFE               	movlw	254
   643  00085E  6E8C               	movwf	3980,c	;volatile
   644                           
   645                           ;keypad.c: 26: _delay((unsigned long)((100)*(8000000L/4000000.0)));
   646  000860  0E42               	movlw	66
   647  000862                     u957:
   648  000862  2EE8               	decfsz	wreg,f,c
   649  000864  D7FE               	bra	u957
   650  000866  D000               	nop2	
   651                           
   652                           ;keypad.c: 27: while (!(PORTD & (1<<4))){valor=letras[0][0];}
   653  000868  D002               	goto	l79
   654  00086A                     l80:
   655  00086A  C023  F033         	movff	keypad_getkey@letras,keypad_getkey@valor
   656  00086E                     l79:
   657  00086E  B883               	btfsc	3971,4,c	;volatile
   658  000870  D003               	goto	l82
   659  000872  D7FB               	goto	l80
   660  000874                     l83:
   661  000874  C024  F033         	movff	keypad_getkey@letras+1,keypad_getkey@valor
   662  000878                     l82:
   663  000878  BA83               	btfsc	3971,5,c	;volatile
   664  00087A  D003               	goto	l85
   665  00087C  D7FB               	goto	l83
   666  00087E                     l86:
   667  00087E  C025  F033         	movff	keypad_getkey@letras+2,keypad_getkey@valor
   668  000882                     l85:
   669  000882  BC83               	btfsc	3971,6,c	;volatile
   670  000884  D003               	goto	l88
   671  000886  D7FB               	goto	l86
   672  000888                     l89:
   673  000888  C026  F033         	movff	keypad_getkey@letras+3,keypad_getkey@valor
   674  00088C                     l88:
   675  00088C  AE83               	btfss	3971,7,c	;volatile
   676  00088E  D7FC               	goto	l89
   677  000890                     l1016:
   678                           
   679                           ;keypad.c: 31: }
   680                           ;keypad.c: 33: if(i==1){
   681  000890  0434               	decf	keypad_getkey@i,w,c
   682  000892  1035               	iorwf	keypad_getkey@i+1,w,c
   683  000894  A4D8               	btfss	status,2,c
   684  000896  D01A               	goto	l1022
   685                           
   686                           ;keypad.c: 34: LATD = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(0<<1)|(1<<0);
   687  000898  0EFD               	movlw	253
   688  00089A  6E8C               	movwf	3980,c	;volatile
   689                           
   690                           ;keypad.c: 35: _delay((unsigned long)((100)*(8000000L/4000000.0)));
   691  00089C  0E42               	movlw	66
   692  00089E                     u967:
   693  00089E  2EE8               	decfsz	wreg,f,c
   694  0008A0  D7FE               	bra	u967
   695  0008A2  D000               	nop2	
   696                           
   697                           ;keypad.c: 36: while (!(PORTD & (1<<4))){valor=letras[1][0];}
   698  0008A4  D002               	goto	l92
   699  0008A6                     l93:
   700  0008A6  C027  F033         	movff	keypad_getkey@letras+4,keypad_getkey@valor
   701  0008AA                     l92:
   702  0008AA  B883               	btfsc	3971,4,c	;volatile
   703  0008AC  D003               	goto	l95
   704  0008AE  D7FB               	goto	l93
   705  0008B0                     l96:
   706  0008B0  C028  F033         	movff	keypad_getkey@letras+5,keypad_getkey@valor
   707  0008B4                     l95:
   708  0008B4  BA83               	btfsc	3971,5,c	;volatile
   709  0008B6  D003               	goto	l98
   710  0008B8  D7FB               	goto	l96
   711  0008BA                     l99:
   712  0008BA  C029  F033         	movff	keypad_getkey@letras+6,keypad_getkey@valor
   713  0008BE                     l98:
   714  0008BE  BC83               	btfsc	3971,6,c	;volatile
   715  0008C0  D003               	goto	l101
   716  0008C2  D7FB               	goto	l99
   717  0008C4                     l102:
   718  0008C4  C02A  F033         	movff	keypad_getkey@letras+7,keypad_getkey@valor
   719  0008C8                     l101:
   720  0008C8  AE83               	btfss	3971,7,c	;volatile
   721  0008CA  D7FC               	goto	l102
   722  0008CC                     l1022:
   723                           
   724                           ;keypad.c: 40: }
   725                           ;keypad.c: 42: if(i==2){
   726  0008CC  0E02               	movlw	2
   727  0008CE  1834               	xorwf	keypad_getkey@i,w,c
   728  0008D0  1035               	iorwf	keypad_getkey@i+1,w,c
   729  0008D2  A4D8               	btfss	status,2,c
   730  0008D4  D01A               	goto	l1028
   731                           
   732                           ;keypad.c: 43: LATD = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(0<<2)|(1<<1)|(1<<0);
   733  0008D6  0EFB               	movlw	251
   734  0008D8  6E8C               	movwf	3980,c	;volatile
   735                           
   736                           ;keypad.c: 44: _delay((unsigned long)((100)*(8000000L/4000000.0)));
   737  0008DA  0E42               	movlw	66
   738  0008DC                     u977:
   739  0008DC  2EE8               	decfsz	wreg,f,c
   740  0008DE  D7FE               	bra	u977
   741  0008E0  D000               	nop2	
   742                           
   743                           ;keypad.c: 45: while (!(PORTD & (1<<4))){valor=letras[2][0];}
   744  0008E2  D002               	goto	l105
   745  0008E4                     l106:
   746  0008E4  C02B  F033         	movff	keypad_getkey@letras+8,keypad_getkey@valor
   747  0008E8                     l105:
   748  0008E8  B883               	btfsc	3971,4,c	;volatile
   749  0008EA  D003               	goto	l108
   750  0008EC  D7FB               	goto	l106
   751  0008EE                     l109:
   752  0008EE  C02C  F033         	movff	keypad_getkey@letras+9,keypad_getkey@valor
   753  0008F2                     l108:
   754  0008F2  BA83               	btfsc	3971,5,c	;volatile
   755  0008F4  D003               	goto	l111
   756  0008F6  D7FB               	goto	l109
   757  0008F8                     l112:
   758  0008F8  C02D  F033         	movff	keypad_getkey@letras+10,keypad_getkey@valor
   759  0008FC                     l111:
   760  0008FC  BC83               	btfsc	3971,6,c	;volatile
   761  0008FE  D003               	goto	l114
   762  000900  D7FB               	goto	l112
   763  000902                     l115:
   764  000902  C02E  F033         	movff	keypad_getkey@letras+11,keypad_getkey@valor
   765  000906                     l114:
   766  000906  AE83               	btfss	3971,7,c	;volatile
   767  000908  D7FC               	goto	l115
   768  00090A                     l1028:
   769                           
   770                           ;keypad.c: 49: }
   771                           ;keypad.c: 51: if(i==3){
   772  00090A  0E03               	movlw	3
   773  00090C  1834               	xorwf	keypad_getkey@i,w,c
   774  00090E  1035               	iorwf	keypad_getkey@i+1,w,c
   775  000910  A4D8               	btfss	status,2,c
   776  000912  D01A               	goto	l1034
   777                           
   778                           ;keypad.c: 52: LATD = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(0<<3)|(1<<2)|(1<<1)|(1<<0);
   779  000914  0EF7               	movlw	247
   780  000916  6E8C               	movwf	3980,c	;volatile
   781                           
   782                           ;keypad.c: 53: _delay((unsigned long)((100)*(8000000L/4000000.0)));
   783  000918  0E42               	movlw	66
   784  00091A                     u987:
   785  00091A  2EE8               	decfsz	wreg,f,c
   786  00091C  D7FE               	bra	u987
   787  00091E  D000               	nop2	
   788                           
   789                           ;keypad.c: 54: while (!(PORTD & (1<<4))){valor=letras[3][0];}
   790  000920  D002               	goto	l118
   791  000922                     l119:
   792  000922  C02F  F033         	movff	keypad_getkey@letras+12,keypad_getkey@valor
   793  000926                     l118:
   794  000926  B883               	btfsc	3971,4,c	;volatile
   795  000928  D003               	goto	l121
   796  00092A  D7FB               	goto	l119
   797  00092C                     l122:
   798  00092C  C030  F033         	movff	keypad_getkey@letras+13,keypad_getkey@valor
   799  000930                     l121:
   800  000930  BA83               	btfsc	3971,5,c	;volatile
   801  000932  D003               	goto	l124
   802  000934  D7FB               	goto	l122
   803  000936                     l125:
   804  000936  C031  F033         	movff	keypad_getkey@letras+14,keypad_getkey@valor
   805  00093A                     l124:
   806  00093A  BC83               	btfsc	3971,6,c	;volatile
   807  00093C  D003               	goto	l127
   808  00093E  D7FB               	goto	l125
   809  000940                     l128:
   810  000940  C032  F033         	movff	keypad_getkey@letras+15,keypad_getkey@valor
   811  000944                     l127:
   812  000944  AE83               	btfss	3971,7,c	;volatile
   813  000946  D7FC               	goto	l128
   814  000948                     l1034:
   815  000948  4A34               	infsnz	keypad_getkey@i,f,c
   816  00094A  2A35               	incf	keypad_getkey@i+1,f,c
   817  00094C  BE35               	btfsc	keypad_getkey@i+1,7,c
   818  00094E  D782               	goto	l1010
   819  000950  5035               	movf	keypad_getkey@i+1,w,c
   820  000952  E101               	bnz	l1038
   821  000954  D779               	goto	L1
   822  000956                     l1038:
   823                           
   824                           ;keypad.c: 58: }
   825                           ;keypad.c: 59: }
   826                           ;keypad.c: 61: return valor;
   827  000956  5033               	movf	keypad_getkey@valor,w,c
   828  000958  0012               	return	
   829  00095A                     __end_of_keypad_getkey:
   830                           	opt stack 0
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           intcon2	equ	0xFF1
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           postdec1	equ	0xFE5
   839                           plusw1	equ	0xFE3
   840                           fsr1l	equ	0xFE1
   841                           plusw2	equ	0xFDB
   842                           status	equ	0xFD8
   843                           
   844 ;; *************** function _LCD_String_xy *****************
   845 ;; Defined at:
   846 ;;		line 57 in file "LCD_20x4_C_file.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;  row             1    wreg     unsigned char 
   849 ;;  pos             1   10[COMRAM] unsigned char 
   850 ;;  str             2   11[COMRAM] PTR const unsigned char 
   851 ;;		 -> STR_2(6), STR_1(14), 
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  row             1   13[COMRAM] unsigned char 
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   863 ;;      Params:         3       0       0       0       0       0       0       0       0
   864 ;;      Locals:         1       0       0       0       0       0       0       0       0
   865 ;;      Temps:          0       0       0       0       0       0       0       0       0
   866 ;;      Totals:         4       0       0       0       0       0       0       0       0
   867 ;;Total ram usage:        4 bytes
   868 ;; Hardware stack levels used:    1
   869 ;; Hardware stack levels required when called:    3
   870 ;; This function calls:
   871 ;;		_LCD_Command
   872 ;;		_LCD_String
   873 ;; This function is called by:
   874 ;;		_main
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text3
   879  000A0A                     __ptext3:
   880                           	opt stack 0
   881  000A0A                     _LCD_String_xy:
   882                           	opt stack 27
   883                           
   884                           ;incstack = 0
   885                           ;LCD_String_xy@row stored from wreg
   886  000A0A  6E30               	movwf	LCD_String_xy@row,c
   887                           
   888                           ;LCD_20x4_C_file.c: 59: if (row == 1)
   889  000A0C  0430               	decf	LCD_String_xy@row,w,c
   890  000A0E  A4D8               	btfss	status,2,c
   891  000A10  D006               	goto	l1310
   892                           
   893                           ;LCD_20x4_C_file.c: 60: LCD_Command((pos & 0x0F)|0x80);
   894  000A12  502D               	movf	LCD_String_xy@pos,w,c
   895  000A14  0B0F               	andlw	15
   896  000A16  0980               	iorlw	128
   897  000A18  ECC8  F005         	call	_LCD_Command
   898  000A1C  D01D               	goto	l1322
   899  000A1E                     l1310:
   900                           
   901                           ;LCD_20x4_C_file.c: 61: else if (row == 2)
   902  000A1E  0E02               	movlw	2
   903  000A20  1830               	xorwf	LCD_String_xy@row,w,c
   904  000A22  A4D8               	btfss	status,2,c
   905  000A24  D006               	goto	l1314
   906                           
   907                           ;LCD_20x4_C_file.c: 62: LCD_Command((pos & 0x0F)|0xC0);
   908  000A26  502D               	movf	LCD_String_xy@pos,w,c
   909  000A28  0B0F               	andlw	15
   910  000A2A  09C0               	iorlw	192
   911  000A2C  ECC8  F005         	call	_LCD_Command
   912  000A30  D013               	goto	l1322
   913  000A32                     l1314:
   914                           
   915                           ;LCD_20x4_C_file.c: 63: else if (row == 3)
   916  000A32  0E03               	movlw	3
   917  000A34  1830               	xorwf	LCD_String_xy@row,w,c
   918  000A36  A4D8               	btfss	status,2,c
   919  000A38  D006               	goto	l1318
   920                           
   921                           ;LCD_20x4_C_file.c: 64: LCD_Command((pos & 0x0F)|0x94);
   922  000A3A  502D               	movf	LCD_String_xy@pos,w,c
   923  000A3C  0B0F               	andlw	15
   924  000A3E  0994               	iorlw	148
   925  000A40  ECC8  F005         	call	_LCD_Command
   926  000A44  D009               	goto	l1322
   927  000A46                     l1318:
   928                           
   929                           ;LCD_20x4_C_file.c: 65: else if (row == 4)
   930  000A46  0E04               	movlw	4
   931  000A48  1830               	xorwf	LCD_String_xy@row,w,c
   932  000A4A  A4D8               	btfss	status,2,c
   933  000A4C  D005               	goto	l1322
   934                           
   935                           ;LCD_20x4_C_file.c: 66: LCD_Command((pos & 0x0F)|0xD4);
   936  000A4E  502D               	movf	LCD_String_xy@pos,w,c
   937  000A50  0B0F               	andlw	15
   938  000A52  09D4               	iorlw	212
   939  000A54  ECC8  F005         	call	_LCD_Command
   940  000A58                     l1322:
   941                           
   942                           ;LCD_20x4_C_file.c: 67: LCD_String(str);
   943  000A58  C02E  F02A         	movff	LCD_String_xy@str,LCD_String@str
   944  000A5C  C02F  F02B         	movff	LCD_String_xy@str+1,LCD_String@str+1
   945  000A60  502A               	movf	LCD_String@str,w,c
   946  000A62  102B               	iorwf	LCD_String@str+1,w,c
   947  000A64  A4D8               	btfss	status,2,c
   948  000A66  0E00               	movlw	low (__mediumconst shr (0+16))
   949  000A68  6E2C               	movwf	LCD_String@str+2,c
   950  000A6A  EC58  F005         	call	_LCD_String	;wreg free
   951  000A6E  0012               	return		;funcret
   952  000A70                     __end_of_LCD_String_xy:
   953                           	opt stack 0
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           intcon2	equ	0xFF1
   959                           postinc0	equ	0xFEE
   960                           wreg	equ	0xFE8
   961                           postdec1	equ	0xFE5
   962                           plusw1	equ	0xFE3
   963                           fsr1l	equ	0xFE1
   964                           plusw2	equ	0xFDB
   965                           status	equ	0xFD8
   966                           
   967 ;; *************** function _LCD_String *****************
   968 ;; Defined at:
   969 ;;		line 47 in file "LCD_20x4_C_file.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;  str             3    7[COMRAM] PTR const unsigned char 
   972 ;;		 -> STR_3(4), ROM(32767), STR_2(6), STR_1(14), 
   973 ;; Auto vars:     Size  Location     Type
   974 ;;  i               2    0        int 
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   984 ;;      Params:         3       0       0       0       0       0       0       0       0
   985 ;;      Locals:         0       0       0       0       0       0       0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0       0       0
   987 ;;      Totals:         3       0       0       0       0       0       0       0       0
   988 ;;Total ram usage:        3 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; Hardware stack levels required when called:    2
   991 ;; This function calls:
   992 ;;		_LCD_Char
   993 ;; This function is called by:
   994 ;;		_LCD_String_xy
   995 ;;		_main
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           	psect	text4
  1000  000AB0                     __ptext4:
  1001                           	opt stack 0
  1002  000AB0                     _LCD_String:
  1003                           	opt stack 27
  1004                           
  1005                           ;LCD_20x4_C_file.c: 49: int i;
  1006                           ;LCD_20x4_C_file.c: 50: while((*str)!=0)
  1007                           
  1008                           ;incstack = 0
  1009  000AB0  D010               	goto	l1288
  1010  000AB2                     l1284:
  1011                           
  1012                           ;LCD_20x4_C_file.c: 51: {
  1013                           ;LCD_20x4_C_file.c: 52: LCD_Char (*str);
  1014  000AB2  C02A  FFF6         	movff	LCD_String@str,tblptrl
  1015  000AB6  C02B  FFF7         	movff	LCD_String@str+1,tblptrh
  1016  000ABA  C02C  FFF8         	movff	LCD_String@str+2,tblptru
  1017  000ABE  0008               	tblrd		*
  1018  000AC0  50F5               	movf	tablat,w,c
  1019  000AC2  ECB9  F005         	call	_LCD_Char
  1020                           
  1021                           ;LCD_20x4_C_file.c: 53: str++;
  1022  000AC6  0E01               	movlw	1
  1023  000AC8  262A               	addwf	LCD_String@str,f,c
  1024  000ACA  0E00               	movlw	0
  1025  000ACC  222B               	addwfc	LCD_String@str+1,f,c
  1026  000ACE  0E00               	movlw	0
  1027  000AD0  222C               	addwfc	LCD_String@str+2,f,c
  1028  000AD2                     l1288:
  1029  000AD2  C02A  FFF6         	movff	LCD_String@str,tblptrl
  1030  000AD6  C02B  FFF7         	movff	LCD_String@str+1,tblptrh
  1031  000ADA  C02C  FFF8         	movff	LCD_String@str+2,tblptru
  1032  000ADE  0008               	tblrd		*
  1033  000AE0  50F5               	movf	tablat,w,c
  1034  000AE2  0900               	iorlw	0
  1035  000AE4  B4D8               	btfsc	status,2,c
  1036  000AE6  0012               	return	
  1037  000AE8  D7E4               	goto	l1284
  1038  000AEA                     __end_of_LCD_String:
  1039                           	opt stack 0
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           intcon2	equ	0xFF1
  1045                           postinc0	equ	0xFEE
  1046                           wreg	equ	0xFE8
  1047                           postdec1	equ	0xFE5
  1048                           plusw1	equ	0xFE3
  1049                           fsr1l	equ	0xFE1
  1050                           plusw2	equ	0xFDB
  1051                           status	equ	0xFD8
  1052                           
  1053 ;; *************** function _LCD_Char *****************
  1054 ;; Defined at:
  1055 ;;		line 22 in file "LCD_20x4_C_file.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  char_data       1    wreg     unsigned char 
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;  char_data       1    6[COMRAM] unsigned char 
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1069 ;;      Params:         0       0       0       0       0       0       0       0       0
  1070 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1072 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1073 ;;Total ram usage:        1 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    1
  1076 ;; This function calls:
  1077 ;;		_MSdelay
  1078 ;; This function is called by:
  1079 ;;		_LCD_String
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text5
  1084  000B72                     __ptext5:
  1085                           	opt stack 0
  1086  000B72                     _LCD_Char:
  1087                           	opt stack 27
  1088                           
  1089                           ;incstack = 0
  1090                           ;LCD_Char@char_data stored from wreg
  1091  000B72  6E29               	movwf	LCD_Char@char_data,c
  1092                           
  1093                           ;LCD_20x4_C_file.c: 24: LATB = char_data;
  1094  000B74  C029  FF8A         	movff	LCD_Char@char_data,3978	;volatile
  1095                           
  1096                           ;LCD_20x4_C_file.c: 25: LATC0 = 1;
  1097  000B78  808B               	bsf	3979,0,c	;volatile
  1098                           
  1099                           ;LCD_20x4_C_file.c: 26: LATC1 = 0;
  1100  000B7A  928B               	bcf	3979,1,c	;volatile
  1101                           
  1102                           ;LCD_20x4_C_file.c: 27: LATC2 = 1;
  1103  000B7C  848B               	bsf	3979,2,c	;volatile
  1104                           
  1105                           ;LCD_20x4_C_file.c: 28: __nop();
  1106  000B7E  F000               	nop	
  1107                           
  1108                           ;LCD_20x4_C_file.c: 29: LATC2 = 0;
  1109  000B80  948B               	bcf	3979,2,c	;volatile
  1110                           
  1111                           ;LCD_20x4_C_file.c: 30: MSdelay(3);
  1112  000B82  0E00               	movlw	0
  1113  000B84  6E24               	movwf	MSdelay@val+1,c
  1114  000B86  0E03               	movlw	3
  1115  000B88  6E23               	movwf	MSdelay@val,c
  1116  000B8A  EC75  F005         	call	_MSdelay	;wreg free
  1117  000B8E  0012               	return		;funcret
  1118  000B90                     __end_of_LCD_Char:
  1119                           	opt stack 0
  1120                           tblptru	equ	0xFF8
  1121                           tblptrh	equ	0xFF7
  1122                           tblptrl	equ	0xFF6
  1123                           tablat	equ	0xFF5
  1124                           intcon2	equ	0xFF1
  1125                           postinc0	equ	0xFEE
  1126                           wreg	equ	0xFE8
  1127                           postdec1	equ	0xFE5
  1128                           plusw1	equ	0xFE3
  1129                           fsr1l	equ	0xFE1
  1130                           plusw2	equ	0xFDB
  1131                           status	equ	0xFD8
  1132                           
  1133 ;; *************** function _LCD_Init *****************
  1134 ;; Defined at:
  1135 ;;		line 33 in file "LCD_20x4_C_file.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;                  1    wreg      void 
  1142 ;; Registers used:
  1143 ;;		wreg, status,2, status,0, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : 0/0
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1149 ;;      Params:         0       0       0       0       0       0       0       0       0
  1150 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1152 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1153 ;;Total ram usage:        0 bytes
  1154 ;; Hardware stack levels used:    1
  1155 ;; Hardware stack levels required when called:    2
  1156 ;; This function calls:
  1157 ;;		_LCD_Command
  1158 ;;		_MSdelay
  1159 ;; This function is called by:
  1160 ;;		_main
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text6
  1165  000A70                     __ptext6:
  1166                           	opt stack 0
  1167  000A70                     _LCD_Init:
  1168                           	opt stack 28
  1169                           
  1170                           ;LCD_20x4_C_file.c: 35: TRISC = 0;
  1171                           
  1172                           ;incstack = 0
  1173  000A70  0E00               	movlw	0
  1174  000A72  6E94               	movwf	3988,c	;volatile
  1175                           
  1176                           ;LCD_20x4_C_file.c: 36: TRISB = 0;
  1177  000A74  0E00               	movlw	0
  1178  000A76  6E93               	movwf	3987,c	;volatile
  1179                           
  1180                           ;LCD_20x4_C_file.c: 38: MSdelay(20);
  1181  000A78  0E00               	movlw	0
  1182  000A7A  6E24               	movwf	MSdelay@val+1,c
  1183  000A7C  0E14               	movlw	20
  1184  000A7E  6E23               	movwf	MSdelay@val,c
  1185  000A80  EC75  F005         	call	_MSdelay	;wreg free
  1186                           
  1187                           ;LCD_20x4_C_file.c: 39: LCD_Command (0x38);
  1188  000A84  0E38               	movlw	56
  1189  000A86  ECC8  F005         	call	_LCD_Command
  1190                           
  1191                           ;LCD_20x4_C_file.c: 40: LCD_Command (0x0C);
  1192  000A8A  0E0C               	movlw	12
  1193  000A8C  ECC8  F005         	call	_LCD_Command
  1194                           
  1195                           ;LCD_20x4_C_file.c: 41: LCD_Command (0x06);
  1196  000A90  0E06               	movlw	6
  1197  000A92  ECC8  F005         	call	_LCD_Command
  1198                           
  1199                           ;LCD_20x4_C_file.c: 42: LCD_Command (0x01);
  1200  000A96  0E01               	movlw	1
  1201  000A98  ECC8  F005         	call	_LCD_Command
  1202                           
  1203                           ;LCD_20x4_C_file.c: 43: MSdelay(3);
  1204  000A9C  0E00               	movlw	0
  1205  000A9E  6E24               	movwf	MSdelay@val+1,c
  1206  000AA0  0E03               	movlw	3
  1207  000AA2  6E23               	movwf	MSdelay@val,c
  1208  000AA4  EC75  F005         	call	_MSdelay	;wreg free
  1209                           
  1210                           ;LCD_20x4_C_file.c: 44: LCD_Command (0x80);
  1211  000AA8  0E80               	movlw	128
  1212  000AAA  ECC8  F005         	call	_LCD_Command
  1213  000AAE  0012               	return		;funcret
  1214  000AB0                     __end_of_LCD_Init:
  1215                           	opt stack 0
  1216                           tblptru	equ	0xFF8
  1217                           tblptrh	equ	0xFF7
  1218                           tblptrl	equ	0xFF6
  1219                           tablat	equ	0xFF5
  1220                           intcon2	equ	0xFF1
  1221                           postinc0	equ	0xFEE
  1222                           wreg	equ	0xFE8
  1223                           postdec1	equ	0xFE5
  1224                           plusw1	equ	0xFE3
  1225                           fsr1l	equ	0xFE1
  1226                           plusw2	equ	0xFDB
  1227                           status	equ	0xFD8
  1228                           
  1229 ;; *************** function _LCD_Command *****************
  1230 ;; Defined at:
  1231 ;;		line 11 in file "LCD_20x4_C_file.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;  cmd             1    wreg     unsigned char 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  cmd             1    6[COMRAM] unsigned char 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      void 
  1238 ;; Registers used:
  1239 ;;		wreg, status,2, status,0, cstack
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1245 ;;      Params:         0       0       0       0       0       0       0       0       0
  1246 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1248 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1249 ;;Total ram usage:        1 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    1
  1252 ;; This function calls:
  1253 ;;		_MSdelay
  1254 ;; This function is called by:
  1255 ;;		_LCD_Init
  1256 ;;		_LCD_String_xy
  1257 ;;		_LCD_Clear
  1258 ;; This function uses a non-reentrant model
  1259 ;;
  1260                           
  1261                           	psect	text7
  1262  000B90                     __ptext7:
  1263                           	opt stack 0
  1264  000B90                     _LCD_Command:
  1265                           	opt stack 28
  1266                           
  1267                           ;incstack = 0
  1268                           ;LCD_Command@cmd stored from wreg
  1269  000B90  6E29               	movwf	LCD_Command@cmd,c
  1270                           
  1271                           ;LCD_20x4_C_file.c: 13: LATB = cmd;
  1272  000B92  C029  FF8A         	movff	LCD_Command@cmd,3978	;volatile
  1273                           
  1274                           ;LCD_20x4_C_file.c: 14: LATC0 = 0;
  1275  000B96  908B               	bcf	3979,0,c	;volatile
  1276                           
  1277                           ;LCD_20x4_C_file.c: 15: LATC1 = 0;
  1278  000B98  928B               	bcf	3979,1,c	;volatile
  1279                           
  1280                           ;LCD_20x4_C_file.c: 16: LATC2 = 1;
  1281  000B9A  848B               	bsf	3979,2,c	;volatile
  1282                           
  1283                           ;LCD_20x4_C_file.c: 17: __nop();
  1284  000B9C  F000               	nop	
  1285                           
  1286                           ;LCD_20x4_C_file.c: 18: LATC2 = 0;
  1287  000B9E  948B               	bcf	3979,2,c	;volatile
  1288                           
  1289                           ;LCD_20x4_C_file.c: 19: MSdelay(3);
  1290  000BA0  0E00               	movlw	0
  1291  000BA2  6E24               	movwf	MSdelay@val+1,c
  1292  000BA4  0E03               	movlw	3
  1293  000BA6  6E23               	movwf	MSdelay@val,c
  1294  000BA8  EC75  F005         	call	_MSdelay	;wreg free
  1295  000BAC  0012               	return		;funcret
  1296  000BAE                     __end_of_LCD_Command:
  1297                           	opt stack 0
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           intcon2	equ	0xFF1
  1303                           postinc0	equ	0xFEE
  1304                           wreg	equ	0xFE8
  1305                           postdec1	equ	0xFE5
  1306                           plusw1	equ	0xFE3
  1307                           fsr1l	equ	0xFE1
  1308                           plusw2	equ	0xFDB
  1309                           status	equ	0xFD8
  1310                           
  1311 ;; *************** function _MSdelay *****************
  1312 ;; Defined at:
  1313 ;;		line 78 in file "LCD_20x4_C_file.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;  val             2    0[COMRAM] unsigned int 
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;  j               2    4[COMRAM] unsigned int 
  1318 ;;  i               2    2[COMRAM] unsigned int 
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		wreg, status,2, status,0
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1328 ;;      Params:         2       0       0       0       0       0       0       0       0
  1329 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1331 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1332 ;;Total ram usage:        6 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; This function calls:
  1335 ;;		Nothing
  1336 ;; This function is called by:
  1337 ;;		_LCD_Command
  1338 ;;		_LCD_Char
  1339 ;;		_LCD_Init
  1340 ;;		_LCD_Clear
  1341 ;;		_keyfind
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text8
  1346  000AEA                     __ptext8:
  1347                           	opt stack 0
  1348  000AEA                     _MSdelay:
  1349                           	opt stack 27
  1350                           
  1351                           ;LCD_20x4_C_file.c: 80: unsigned int i,j;
  1352                           ;LCD_20x4_C_file.c: 81: for(i=0;i<val;i++)
  1353                           
  1354                           ;incstack = 0
  1355  000AEA  0E00               	movlw	0
  1356  000AEC  6E26               	movwf	MSdelay@i+1,c
  1357  000AEE  0E00               	movlw	0
  1358  000AF0  6E25               	movwf	MSdelay@i,c
  1359  000AF2  D00F               	goto	l1252
  1360  000AF4                     l1240:
  1361                           
  1362                           ;LCD_20x4_C_file.c: 82: for(j=0;j<165;j++);
  1363  000AF4  0E00               	movlw	0
  1364  000AF6  6E28               	movwf	MSdelay@j+1,c
  1365  000AF8  0E00               	movlw	0
  1366  000AFA  6E27               	movwf	MSdelay@j,c
  1367  000AFC                     l1242:
  1368  000AFC  5028               	movf	MSdelay@j+1,w,c
  1369  000AFE  E107               	bnz	l1250
  1370  000B00  0EA5               	movlw	165
  1371  000B02  5C27               	subwf	MSdelay@j,w,c
  1372  000B04  B0D8               	btfsc	status,0,c
  1373  000B06  D003               	goto	l1250
  1374  000B08  4A27               	infsnz	MSdelay@j,f,c
  1375  000B0A  2A28               	incf	MSdelay@j+1,f,c
  1376  000B0C  D7F7               	goto	l1242
  1377  000B0E                     l1250:
  1378  000B0E  4A25               	infsnz	MSdelay@i,f,c
  1379  000B10  2A26               	incf	MSdelay@i+1,f,c
  1380  000B12                     l1252:
  1381  000B12  5023               	movf	MSdelay@val,w,c
  1382  000B14  5C25               	subwf	MSdelay@i,w,c
  1383  000B16  5024               	movf	MSdelay@val+1,w,c
  1384  000B18  5826               	subwfb	MSdelay@i+1,w,c
  1385  000B1A  B0D8               	btfsc	status,0,c
  1386  000B1C  0012               	return	
  1387  000B1E  D7EA               	goto	l1240
  1388  000B20                     __end_of_MSdelay:
  1389                           	opt stack 0
  1390                           tblptru	equ	0xFF8
  1391                           tblptrh	equ	0xFF7
  1392                           tblptrl	equ	0xFF6
  1393                           tablat	equ	0xFF5
  1394                           intcon2	equ	0xFF1
  1395                           postinc0	equ	0xFEE
  1396                           wreg	equ	0xFE8
  1397                           postdec1	equ	0xFE5
  1398                           plusw1	equ	0xFE3
  1399                           fsr1l	equ	0xFE1
  1400                           plusw2	equ	0xFDB
  1401                           status	equ	0xFD8
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           intcon2	equ	0xFF1
  1407                           postinc0	equ	0xFEE
  1408                           wreg	equ	0xFE8
  1409                           postdec1	equ	0xFE5
  1410                           plusw1	equ	0xFE3
  1411                           fsr1l	equ	0xFE1
  1412                           plusw2	equ	0xFDB
  1413                           status	equ	0xFD8
  1414                           
  1415                           	psect	rparam
  1416  0000                     tblptru	equ	0xFF8
  1417                           tblptrh	equ	0xFF7
  1418                           tblptrl	equ	0xFF6
  1419                           tablat	equ	0xFF5
  1420                           intcon2	equ	0xFF1
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           postdec1	equ	0xFE5
  1424                           plusw1	equ	0xFE3
  1425                           fsr1l	equ	0xFE1
  1426                           plusw2	equ	0xFDB
  1427                           status	equ	0xFD8


Data Sizes:
    Strings     24
    Constant    0
    Data        34
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      59
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCD_String_xy@str	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[6]), STR_1(CODE[14]), 

    LCD_String@str	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_3(CODE[4]), ROM(CODE[32767]), STR_2(CODE[6]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_keypad_getkey
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4701
                                             19 COMRAM     3     3      0
                           _LCD_Init
                         _LCD_String
                      _LCD_String_xy
                      _keypad_getkey
                        _keypad_init
 ---------------------------------------------------------------------------------
 (1) _keypad_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keypad_getkey                                       19    19      0     345
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        4     1      3    2071
                                             10 COMRAM     4     1      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           5     2      3     927
                                              7 COMRAM     3     0      3
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             1     1      0     690
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0    1358
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          1     1      0     690
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (4) _MSdelay                                              6     4      2     668
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _LCD_String
     _LCD_Char
       _MSdelay
   _LCD_String_xy
     _LCD_Command
       _MSdelay
     _LCD_String
       _LCD_Char
         _MSdelay
   _keypad_getkey
   _keypad_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      3B       1       62.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3B      20        0.0%
DATA                 0      0      3B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Nov 27 10:48:05 2020

           ?_LCD_Command 0023                       l80 086A                       l82 0878  
                     l83 0874                       l92 08AA                       l93 08A6  
                     l85 0882                       l86 087E                       l95 08B4  
                     l79 086E                       l96 08B0                       l88 088C  
                     l89 0888                       l98 08BE                       l99 08BA  
                     u91 0824              __CFG_BORV$3 000000              ?_LCD_String 002A  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l101 08C8                      l102 08C4  
                    l111 08FC                      l112 08F8                      l121 0930  
                    l105 08E8                      l122 092C                      l114 0906  
                    l106 08E4                      l115 0902                      l124 093A  
                    l108 08F2                      l125 0936                      l109 08EE  
                    l118 0926                      l127 0944                      l119 0922  
                    l128 0940                      l284 0994                      l289 09E8  
           __CFG_CPB$OFF 000000                      u100 0852             __CFG_CPD$OFF 000000  
                    u947 09FA                      u957 0862                      u967 089E  
                    u977 08DC                      u987 091A             __CFG_BOR$OFF 000000  
                    _key 0022                      _var 0021                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1010 0854  
                   l1022 08CC                     l1016 0890                     l1034 0948  
                   l1028 090A                     l1310 0A1E                     l1038 0956  
                   l1240 0AF4                     l1250 0B0E                     l1242 0AFC  
                   l1314 0A32                     l1322 0A58                     l1252 0B12  
                   l1318 0A46                     l1284 0AB2                     l1444 099C  
                   l1288 0AD2                     STR_1 0801                     STR_2 080F  
                   STR_3 0815                     _LATB 000F8A                     _LATD 000F8C  
           __CFG_PWRT$ON 000000                     _main 095A                     fsr1l 000FE1  
                   start 0000          __end_of_MSdelay 0B20            __CFG_IESO$OFF 000000  
          _LCD_String_xy 0A0A             ___param_bank 000000         __end_of_LCD_Char 0B90  
       __end_of_LCD_Init 0AB0            __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0023                    _LATC0 007C58                    _LATC1 007C59  
                  _LATC2 007C5A                    _SPBRG 000FAF                    _PORTD 000F83  
          __CFG_USBDIV$1 000000                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TXREG 000FAD            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
           ?_keypad_init 0023                    tablat 000FF5                    plusw1 000FE3  
                  plusw2 000FDB                    status 000FD8      __size_of_LCD_String 003A  
         __CFG_ICPRT$OFF 000000           ?_LCD_String_xy 002D           __CFG_MCLRE$OFF 000000  
        __initialization 0B20             __end_of_main 0A0A                   ??_main 0036  
          __activetblptr 000002      keypad_getkey@letras 0023         LCD_String_xy@pos 002D  
       LCD_String_xy@row 0030         LCD_String_xy@str 002E                ??_MSdelay 0025  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                   _keypad 0001  
                 _rowloc 003A     __size_of_LCD_Command 001E             __pdataCOMRAM 0001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ?_LCD_Char 0023               __accesstop 0060  
__end_of__initialization 0B46                ?_LCD_Init 0023          __CFG_PBADEN$OFF 000000  
        ??_LCD_String_xy 0030            ___rparam_used 000001   __size_of_keypad_getkey 0140  
         __pcstackCOMRAM 0023             ??_LCD_String 002D     __size_of_keypad_init 000C  
             ??_LCD_Char 0029               ??_LCD_Init 002A       __end_of_LCD_String 0AEA  
          _keypad_getkey 081A                  _MSdelay 0AEA          __CFG_VREGEN$OFF 000000  
          LCD_String@str 002A                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 0800                  __pcinit 0B20                  __ramtop 0800  
                __ptext0 095A                  __ptext1 0BAE                  __ptext2 081A  
                __ptext3 0A0A                  __ptext4 0AB0                  __ptext5 0B72  
                __ptext6 0A70                  __ptext7 0B90                  __ptext8 0AEA  
                _col_loc 003B           ?_keypad_getkey 0023     end_of_initialization 0B46  
         LCD_Command@cmd 0029            __Lmediumconst 0000                _RCSTAbits 000FAB  
                postdec1 000FE5                  postinc0 000FEE                _PORTDbits 000F83  
              _TRISCbits 000F94                _TXSTAbits 000FAC        __size_of_LCD_Char 001E  
      __size_of_LCD_Init 0040            ??_LCD_Command 0029        LCD_Char@char_data 0029  
        ??_keypad_getkey 0023              _BAUDCONbits 000FB8            __pidataCOMRAM 0B50  
     keypad_getkey@F3814 0011      start_initialization 0B20       keypad_getkey@valor 0033  
  __end_of_LCD_String_xy 0A70         __CFG_LPT1OSC$OFF 000000      __end_of_LCD_Command 0BAE  
            __pbssCOMRAM 0039            ??_keypad_init 0023                 ?_MSdelay 0023  
            __smallconst 0800                 MSdelay@i 0025                 MSdelay@j 0027  
               _LCD_Char 0B72                 _LCD_Init 0A70                 _LATDbits 000F8C  
    __end_of_keypad_init 0BBA         __CFG_WDTPS$32768 000000              _LCD_Command 0B90  
            _INTCON2bits 000FF1                copy_data0 0B34         __size_of_MSdelay 0036  
               __Hrparam 0000                 __Lrparam 0000    __CFG_FOSC$INTOSCIO_EC 000000  
            _keypad_init 0BAE            __size_of_main 00B0               MSdelay@val 0023  
               _temp_col 0039               _LCD_String 0AB0    __CFG_CPUDIV$OSC1_PLL2 000000  
  __end_of_keypad_getkey 095A               _OSCCONbits 000FD3   __size_of_LCD_String_xy 0066  
         keypad_getkey@i 0034  
